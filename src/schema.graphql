# import Group from "./generated/prisma.graphql"
# import Settings from "./generated/prisma.graphql"
# import MetaData from "./generated/prisma.graphql"
# import User from "./generated/prisma.graphql"
# import Post from "./generated/prisma.graphql"
# import Comment from "./generated/prisma.graphql"
# import Tag from "./generated/prisma.graphql"
# import Content from "./generated/prisma.graphql"
# import CONTENT_TYPE from "./generated/prisma.graphql"

type Query {
  getGroups(where: GroupSearchInput!, token: String!): [Group]
  getUsers(where: UsersSearchInput!, token: String!): [User]
  getPosts(
    where: PostsSearchInput!
    orderBy: PostOrderByInput
    token: String!
  ): [Post]
  getComments(
    where: CommentsSearchInput!
    orderBy: CommentOrderByInput
    token: String!
  ): [Comment]
  getTagsForPosts(where: InputTagSearch!, token: String!): [Tag]
  getTagsForComments(where: InputTagSearch!, token: String!): [Tag]
  grandParentLogin(sessionToken: String, answers: Answers): GrandParentLogin
}

input Answers {
  selected: [String]
  unselected: [String]
}

type GrandParentLogin {
  token: String
  question: Question
}

type Question {
  options: [String!]!
  type: String!
}

input GroupSearchInput {
  id: String
  users_some: InputUserUnique
  posts_some: InputId
  admin: InputUserUnique
}

input UsersSearchInput {
  id: String
  contactNumber: String
  email: String
  posts_some: InputId
  groups_some: InputId
  comments_some: InputId
}

input PostsSearchInput {
  id: String
  group: InputId
  comments_some: InputId
  user: InputUserUnique
  tags_some: InputId
  published: Boolean
}

input CommentsSearchInput {
  id: String
  user: InputUserUnique
  tags_some: InputId
  post: PostsSearchInput
  published: Boolean
}

input InputTagSearch {
  id: String
  link_post: InputId
  link_comment: InputId
  user: InputUserUnique
}

input InputId {
  id: String
}

input InputUserUnique {
  id: String
  contactNumber: String
  email: String
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  profilePicture: String
  age: Int
  generation: Int
  posts: [Post]
  comments: [Comment]
  groups: [Group]
  email: String
  contactNumber: String!
}

input UserCreation {
  name: String!
  profilePicture: String
  age: Int
  email: String
  contactNumber: String!
}

input UserUpdate {
  name: String
  profilePicture: String
  email: String
}

type UserAuthPayload {
  token: String
  user: User
}

type GroupAuthPayload {
  token: String
  group: Group
}

type GroupCreationOutput {
  token: String
  group: Group
}

input GroupCreation {
  welcomeText: String!
  colorScheme: String!
  description: String!
}

input ContentCreation {
  contentType: CONTENT_TYPE!
  description: String!
  mediaUrl: String
  published: Boolean
}

type Mutation {
  createUser(data: UserCreation): UserAuthPayload
  login(contactNumber: String!, password: String!): UserAuthPayload
  createGroup(
    data: GroupCreation
    contactNumbers: [String!]
    token: String!
  ): GroupAuthPayload
  selectGroup(id: String!, token: String!): GroupAuthPayload
  createPost(
    content: ContentCreation!
    tags_contactNumbers: [String]
    token: String!
  ): Post
  createComment(
    postId: String!
    content: ContentCreation!
    tags_contactNumbers: [String]
    token: String!
  ): Comment
  updateUser(data: UserUpdate, id: String, token: String!): User
  deletePost(id: String!, token: String!): Post
  deleteComment(id: String!, token: String!): Comment
  deleteTag(id: String!, token: String!): Tag
  deleteUser(id: String!, token: String!): User
  deleteUserFromGroup(id: String!, token: String!): User
}
