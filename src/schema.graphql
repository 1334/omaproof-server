# import Group from "./generated/prisma.graphql"
# import Settings from "./generated/prisma.graphql"
# import MetaData from "./generated/prisma.graphql"
# import User from "./generated/prisma.graphql"
# import Post from "./generated/prisma.graphql"
# import Comment from "./generated/prisma.graphql"
# import Tag from "./generated/prisma.graphql"
# import Content from "./generated/prisma.graphql"
# import CONTENT_TYPE from "./generated/prisma.graphql"

type Query {
  getGroups(where: GroupSearchInput!): [Group]
  getUsers(where: UsersSearchInput!): [User]
  getPosts(where: PostsSearchInput!): [Post]
  getComments(where: CommentsSearchInput!): [Comment]
  getTags(where: InputTagSearch!): [Tag]
}

input GroupSearchInput {
  id: String
  users_some: InputUserUnique
  posts_some: InputId
  admin: InputUserUnique
}

input UsersSearchInput {
  id: String
  contactNumber: String
  email: String
  posts_some: InputId
  groups_some: InputId
  comments_some: InputId
}

input PostsSearchInput {
  id: String
  group: InputId
  comments_some: InputId
  user: InputUserUnique
  tags_some: InputId
  published: Boolean
}

input CommentsSearchInput {
  id: String
  user: InputUserUnique
  tags_some: InputId
  post: InputId
  published: Boolean
}

input InputTagSearch {
  id: String
  link_post: InputId
  link_comment: InputId
  user: InputUserUnique
}

input InputId {
  id: String
}

input InputUserUnique {
  id: String
  contactNumber: String
  email: String
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  profilePicture: String
  age: Int
  generation: Int
  posts: [Post]
  comments: [Comment]
  groups: [Group]
  email: String
  securityQuestions: String!
  contactNumber: String!
}

input SignUp {
  name: String!
  profilePicture: String
  age: Int
  generation: Int
  groups: [String]
  email: String
  securityQuestions: String!
  securityAnswers: String!
  contactNumber: String!
}

type AuthPayload {
  token: String
  user: User
}

input GroupCreation {
  welcomeText: String!
  admin_contactNumber: String!
  users_contactNumbers: [String]
  colorScheme: String!
  description: String!
}

input ContentCreation {
  contentType: CONTENT_TYPE!
  description: String!
  mediaUrl: String
  published: Boolean
}

type Mutation {
  createUser(data: SignUp!): AuthPayload
  login(contactNumber: String!, securityAnswers: String!): AuthPayload
  createGroup(data: GroupCreation!): Group
  createTag(contactNumber: String!, contentId: String!, isPost: Boolean!): Tag
  createPost(
    contactNumber: String!
    groupId: String!
    content: ContentCreation!
    tags_contactNumbers: [String]
  ): Post
  createComment(
    contactNumber: String!
    postId: String!
    content: ContentCreation!
    tags_contactNumbers: [String]
  ): Comment
  deletePost(id: String!): Post
  deleteComment(id: String!): Comment
  deleteTag(id: String!): Tag
  deleteUser(id: String!): User
}
